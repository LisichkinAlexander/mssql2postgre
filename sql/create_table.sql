SET NOCOUNT ON;

DECLARE
	@object_name SYSNAME,
	@ms_object_name SYSNAME,
	@object_id INT,
    @SQL NVARCHAR(MAX)

SELECT
      @object_name = '"' + OBJECT_NAME([object_id]) + '"',
      @ms_object_name = '[' + OBJECT_SCHEMA_NAME(o.[object_id]) + '].[' + OBJECT_NAME([object_id]) + ']'
    , @object_id = [object_id]
FROM (SELECT [object_id] = OBJECT_ID('%s', 'U')) o

IF OBJECT_ID('tempdb..##TEXT_FIELD_WITH_ZERO') IS NOT NULL
    DROP TABLE ##TEXT_FIELD_WITH_ZERO

-- PostgreSQL doesn't support storing NULL (0x00) characters in text
select @SQL = 'select * into ##TEXT_FIELD_WITH_ZERO from (' + 
	STUFF((
	select
		' union all select count(*) as CNT, ''' + c.name + ''' column_name from ' + @ms_object_name + ' where [' + c.name +'] like ''%'' + CHAR(0) + ''%'''
	from
		sys.columns c WITH(NOLOCK)
	join
		(
			select tp2.name, tp.user_type_id
			from sys.types tp WITH(NOLOCK)
			left join sys.types tp2 WITH(NOLOCK) on tp.system_type_id = tp2.system_type_id and tp2.user_type_id = tp2.system_type_id
		) t ON c.user_type_id = t.user_type_id
	where
		t.name in ('TEXT', 'NTEXT', 'VARCHAR', 'NVARCHAR')
		and c.object_id = @object_id
		FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 10, '') +') t'

if @SQL is null 
	set @SQL = 'select * into ##TEXT_FIELD_WITH_ZERO from (select cast(null as int) as cnt, cast(null as nvarchar) as column_name) t' 

EXECUTE sp_executesql @SQL

SELECT @SQL = 'CREATE TABLE IF NOT EXISTS ' + @object_name + CHAR(13) + '(' + CHAR(13) + STUFF((
    SELECT CHAR(13) + '    , "' + replace(replace(c.name, char(13), ''), char(10), '')  + '" ' + 
        CASE WHEN c.is_computed = 1
            THEN 'AS ' + OBJECT_DEFINITION(c.[object_id], c.column_id)
            ELSE 
                CASE 
                    WHEN tp.name = 'BINARY' THEN 'BYTEA'
                    WHEN tp.name = 'BIT' THEN 'BOOLEAN'
                    WHEN tp.name = 'VARCHAR' and c.max_length = -1 and IsNull(tf.cnt, 0) = 0 THEN 'TEXT'
                    WHEN tp.name = 'VARCHAR' and c.max_length = -1 and IsNull(tf.cnt, 0) > 0 THEN 'BYTEA'
                    WHEN tp.name = 'VARBINARY' THEN 'BYTEA'
                    WHEN tp.name = 'NVARCHAR' and c.max_length = -1 and IsNull(tf.cnt, 0) = 0 THEN 'TEXT'
                    WHEN tp.name = 'NVARCHAR' and c.max_length = -1 and IsNull(tf.cnt, 0) > 0 THEN 'BYTEA'
                    WHEN tp.name = 'NVARCHAR' THEN 'VARCHAR'
                    WHEN tp.name = 'NTEXT' and IsNull(tf.cnt, 0) = 0 THEN 'TEXT'
                    WHEN tp.name = 'NTEXT' and IsNull(tf.cnt, 0) > 0 THEN 'BYTEA'
                    WHEN tp.name = 'DATETIME' THEN 'TIMESTAMP'
                    WHEN tp.name = 'IMAGE' THEN 'BYTEA'
                    WHEN tp.name = 'DATETIMEOFFSET' THEN 'TIMESTAMP'
                    WHEN tp.name = 'UNIQUEIDENTIFIER' THEN 'UUID'
                    WHEN tp.name = 'DATETIME2' THEN 'TIMESTAMP'
                    WHEN tp.name = 'TINYINT' THEN 'SMALLINT'
                    WHEN tp.name = 'SMALLMONEY' THEN 'MONEY'
                    WHEN tp.name = 'SMALLDATETIME' THEN 'TIMESTAMP(0)'
                    WHEN tp.name = 'ROWVERSION' THEN 'BYTEA'
					WHEN tp.name = 'TEXT' and tf.cnt > 0 THEN 'BYTEA'
					WHEN tp.name = 'VARCHAR' and tf.cnt > 0 THEN 'BYTEA'
                    ELSE UPPER(tp.name)
                END  + 
                CASE 
                    WHEN tp.name IN ('varchar', 'char', 'nvarchar', 'nchar')
                        THEN CASE WHEN c.max_length = -1 or tf.cnt > 0
                                        THEN '' 
                                        ELSE '(' + CAST(c.max_length AS VARCHAR(5)) + ')'
                                    END
                    WHEN tp.name = 'datetimeoffset'
                        THEN '(' + CAST(c.scale AS VARCHAR(5)) + ') WITH TIME ZONE'
                    WHEN tp.name IN ('datetime2', 'time2', 'datetimeoffset') 
                        THEN '(' + CAST(c.scale AS VARCHAR(5)) + ')'
                    WHEN tp.name = 'decimal'
                        THEN '(' + CAST(c.[precision] AS VARCHAR(5)) + ',' + CAST(c.scale AS VARCHAR(5)) + ')'
                    ELSE ''
                END +
                /*CASE WHEN c.collation_name IS NOT NULL AND c.system_type_id = c.user_type_id 
                    THEN ' COLLATE ' + c.collation_name
                    ELSE ''
                END +*/
                CASE WHEN c.is_nullable = 1 
                    THEN ' NULL'
                    ELSE ' NOT NULL'
                END +
                /*CASE WHEN c.default_object_id != 0 
                    THEN ' CONSTRAINT [' + OBJECT_NAME(c.default_object_id) + ']' + 
						 ' DEFAULT ' + OBJECT_DEFINITION(c.default_object_id)
                    ELSE ''
                END + 
				CASE WHEN cc.[object_id] IS NOT NULL 
					THEN ' CONSTRAINT [' + cc.name + '] CHECK ' + cc.[definition]
					ELSE ''
				END	+*/
                CASE WHEN c.is_identity = 1 
                    THEN ' GENERATED BY DEFAULT AS IDENTITY(START WITH ' + CAST(IDENTITYPROPERTY(c.[object_id], 'SeedValue') AS VARCHAR(5)) + ' ' + 
                                    ' MINVALUE ' + CAST(IDENTITYPROPERTY(c.[object_id], 'SeedValue') AS VARCHAR(5)) + ' ' + 
                                    ' INCREMENT BY ' + CAST(IDENTITYPROPERTY(c.[object_id], 'IncrementValue') AS VARCHAR(5)) + ')' 
                    ELSE '' 
                END 
        END
    FROM sys.columns c WITH(NOLOCK)
    JOIN (
		select tp2.name, tp.user_type_id
		from sys.types tp WITH(NOLOCK)
		left join sys.types tp2 WITH(NOLOCK) on tp.system_type_id = tp2.system_type_id and tp2.user_type_id = tp2.system_type_id
	) tp ON c.user_type_id = tp.user_type_id
	LEFT JOIN sys.check_constraints cc WITH(NOLOCK) ON c.[object_id] = cc.parent_object_id AND cc.parent_column_id = c.column_id
	LEFT JOIN ##TEXT_FIELD_WITH_ZERO tf on c.name = tf.column_name
    WHERE c.[object_id] = @object_id
    ORDER BY c.column_id
    FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 7, '      ') + 
    ISNULL((SELECT '
    , CONSTRAINT "' + i.name + '" PRIMARY KEY ' + 
	/*CASE WHEN i.index_id = 1 
		THEN 'CLUSTERED' 
		ELSE 'NONCLUSTERED' 
	END*/ +' (' + (
    SELECT STUFF(CAST((
        SELECT ', "' + COL_NAME(ic.[object_id], ic.column_id) + '"' /*+
                CASE WHEN ic.is_descending_key = 1
                    THEN ' DESC'
                    ELSE ''
                END*/
        FROM sys.index_columns ic WITH(NOLOCK)
        WHERE i.[object_id] = ic.[object_id]
            AND i.index_id = ic.index_id
        FOR XML PATH(N''), TYPE) AS NVARCHAR(MAX)), 1, 2, '')) + ')'
    FROM sys.indexes i WITH(NOLOCK)
    WHERE i.[object_id] = @object_id
        AND i.is_primary_key = 1), '') + CHAR(13) + ');'

select @SQL as SQL
